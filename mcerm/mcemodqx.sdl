IMPLEMENTATION  mcemodqx  of MODULE mcemod;
 /*
 *  
 *  $Author: Inderjeet $
 *
 *  Environment:
 *    rnxsysqx,rnqsybqx,ceisebqx    
 *
 *  Description:
 *      Cell table handle routines
 *
 *  COPYRIGHT (c) 2006 - 2010 NSN
 *
 **************************************************************************/

DCL WITHWARMING
    G_test_log                byte;

DCL
    G_hand_data               mce_hand_data__t,
    G_mcermi_debug_flag       bool,
    G_c1file_update_period    dword,
    G_pcermi_report_period    dword;


/**************************************************************************/
PROCEDURE mark_selective_features_on ;
/**************************************************************************/
FPAR
    IN/OUT  p_cerm_status       cerm_status__t;

RETURNS bool;    

/**************************************************************************/
START;
    DECISION p_cerm_status /= cerm_status__t_all_active_c; /*for phase 1 only data collecting feature is needed to be checked*/
    (T):
        DECISION p_cerm_status;  /*all features are ON*/
        (cerm_status__t_all_active_c):
            TASK memset(bytepointer(@G_hand_data.cerm_conf_data.sub_flags),
                                    1,
                                    SIZEOF(cerm_subfeatures_t));

            TASK G_hand_data.cerm_conf_data.cerm_main_flag := T;
            RETURN T;

        (cerm_status__t_all_inactive_c):    /*none of the feature is ON*/
            TASK memset(bytepointer(@G_hand_data.cerm_conf_data.sub_flags),
                                    0,
                                    SIZEOF(cerm_subfeatures_t));
            TASK G_hand_data.cerm_conf_data.cerm_main_flag := F;
            RETURN F;    
        ELSE:
            TASK memset(bytepointer(@G_hand_data.cerm_conf_data.sub_flags),
                                    0,SIZEOF(cerm_subfeatures_t));

            DECISION bit_and_r(p_cerm_status, cerm_mask__t_data_collecting);
            (/=0):
               TASK G_hand_data.cerm_conf_data.sub_flags.data_collecting := T,
                    G_hand_data.cerm_conf_data.cerm_main_flag := T;
            ENDDECISION;
            
            DECISION bit_and_r(p_cerm_status, cerm_mask__t_pref_dsp_list_upd);
            (/=0):
               TASK G_hand_data.cerm_conf_data.sub_flags.pref_dsps_update := T;
            ENDDECISION;
            
            DECISION bit_and_r(p_cerm_status, cerm_mask__t_dsp_for_l2);
            (/=0):
               TASK G_hand_data.cerm_conf_data.sub_flags.dsps_for_l2 := T;
            ENDDECISION;
            
            DECISION bit_and_r(p_cerm_status, cerm_mask__t_load_supervision);
            (/=0):
               TASK G_hand_data.cerm_conf_data.sub_flags.load_supervising := T;
            ENDDECISION;
            
            DECISION bit_and_r(p_cerm_status, cerm_mask__t_load_balancing);
            (/=0):
               TASK G_hand_data.cerm_conf_data.sub_flags.load_balancing := T;
            ENDDECISION;
            
            DECISION bit_and_r(p_cerm_status, cerm_mask__t_pce_cell_reloc);
            (/=0):
               TASK G_hand_data.cerm_conf_data.sub_flags.pce_cell_reloc := T;
            ENDDECISION;
            
            DECISION bit_and_r(p_cerm_status, cerm_mask__t_mce_cell_reloc);
            (/=0):
               TASK G_hand_data.cerm_conf_data.sub_flags.mce_cell_reloc := T;
            ENDDECISION;
            
            DECISION bit_and_r(p_cerm_status, cerm_mask__t_dsp_pool_tuning);
            (/=0):
               TASK G_hand_data.cerm_conf_data.sub_flags.dsp_pool_tuning := T;
            ENDDECISION;
            
            DECISION bit_and_r(p_cerm_status, cerm_mask__t_event_logging);
            (/=0):
               TASK G_hand_data.cerm_conf_data.sub_flags.event_logging := T;
            ENDDECISION; 
            DECISION G_hand_data.cerm_conf_data.cerm_main_flag;
            (T):
                RETURN T;
            ENDDECISION;
        ENDDECISION;
    ENDDECISION;

RETURN F;
ENDPROCEDURE mark_selective_features_on;

/* Procedure Definition ***************************************************/

PROCEDURE handle_re_unit_restart_imminent;

/* Variable definitions ***************************************************/

DCL
    l_hand_index              dword,
    l_hand_pid                pid,
    l_pce_pid                 pid,
    l_msg_data                msg_124a_t,
    l_msg_mce_data            msg_0fff_t;

/* Procedure Body *********************************************************/
START;
    TASK l_hand_index := 0;

    WHILE l_hand_index < G_hand_data.count;
        DECISION G_hand_data.cell_data_ptr->cell_data(l_hand_index)->mce_hand_info.hand_pr_id /= 0 ;
        (T):  
            TASK l_msg_data.cell_id := G_hand_data.cell_data_ptr->cell_data(l_hand_index)->cell_id,
                 l_msg_data.send_report := F;

            TASK l_pce_pid  := NULL,
                 l_hand_pid := NULL; 
            
            /*  TASK send_stop_data_collect(l_msg_data);*/
            TASK make_pid_r(l_pce_pid,  log_address_t_icsux_c ,pcermi_p,0,0);
            
            OUTPUT cerm_data_collect_stop_s(l_msg_data) TO l_pce_pid COMMENT '0x124a';
            TASK make_pid_r(l_hand_pid,
                            get_pid_computer_r(SELF),
                            mcermi_p,
                            G_hand_data.cell_data_ptr->cell_data(l_hand_index)->mce_hand_info.hand_pr_id,
                            0);
            TASK l_msg_mce_data.mce_task   := mce_task_t_hand_stop_c;
            /*send message to CP_HAND for hand stop*/  
            OUTPUT mce_hand_info_s(l_msg_mce_data) TO l_hand_pid COMMENT '0xFFFE';
            TASK G_hand_data.cell_data_ptr->cell_data(l_hand_index)->mce_hand_info.hand_pr_id := 0;
            
        ENDDECISION;
        TASK l_hand_index := l_hand_index + 1;
    ENDWHILE;
    
    TASK cell_table_init__r();           /*Initialize global cell table for Cell DATA*/
    TASK init_mce_hand_tbl();            /*Initialize hand_table*/
    TASK release_dynamic_data();         /* release the dynamic memory handle*/

    RETURN;

ENDPROCEDURE handle_re_unit_restart_imminent;
 
 /* Procedure Definition ***************************************************/

PROCEDURE allocate_mcerm_memory;

/* Return parameters ******************************************************/

RETURNS cell_data_ptr__t;

/* Variable definitions ***************************************************/

DCL
    l_buf_ptr_handle                 ptr_and_handle_t,
    l_status                         error_t := success_ec;

/* Procedure Body *********************************************************/
START;

    DECISION G_hand_data.count;
    (>=cerm_data_tbl__t_max_recs_c):
        TASK write_error_log(log_type_t_empty_e_c,NIL,0,
                            @'MCEMOD: CERM table full');
    ELSE:    /* first allocation */
        DECISION (allocate_buffer_r(SIZEOF(mce_cell_table__t),time_limit_t_no_time_limit_c,l_buf_ptr_handle));
        (T):
            TASK G_hand_data.cell_data_ptr->cell_data(G_hand_data.count)   := cell_data_ptr__t(ptr_and_handle_t_to_ptr_r(l_buf_ptr_handle)),
                 G_hand_data.cerm_data_tbl_handle := ptr_and_handle_t_to_handle_r(l_buf_ptr_handle),
                 G_hand_data.count           := G_hand_data.count + 1;

            RETURN cell_data_ptr__t(G_hand_data.cell_data_ptr->cell_data(G_hand_data.count - 1));
        ELSE:
            TASK l_status := osc_status();

            TASK write_error_log(log_type_t_dword_e_c,bytepointer(@l_status),1,
                                @'MCEMOD: CERM memory allocation failed');
        ENDDECISION;
    ENDDECISION;
    RETURN NIL;
ENDPROCEDURE allocate_mcerm_memory;

 
PROCEDURE print_whole_cell_table;
/* Variable definitions ***************************************************/

DCL
    l_index                       dword := 0;

/* Procedure Body *********************************************************/
START;
   TASK write_test_log(log_type_t_empty_t_c,NIL,0,
                      @'MCEMOD: print_whole_cell_table');
                          
    WHILE l_index < G_hand_data.count;
        TASK write_test_log(log_type_t_word_e_c,bytepointer(@G_hand_data.cell_data_ptr->cell_data(l_index)->cell_id),1,
                           @'ce1libwr:cell_id');

        TASK write_test_log(log_type_t_word_e_c,bytepointer(@G_hand_data.cell_data_ptr->cell_data(l_index)->mce_hand_info.hand_pr_id),1,
                           @'ce1libwr:cp_proid');
        
        TASK l_index := l_index + 1;
    ENDWHILE;
   TASK write_test_log(log_type_t_empty_t_c,NIL,0,
                      @'MCEMOD:print_whole_cell_table done');
ENDPROCEDURE print_whole_cell_table;
 
/**************************************************************************/ 
PROCEDURE init_supervision_info;
DCL
    L_tbl_index dword;
START;
    TASK write_test_log(log_type_t_empty_t_c,NIL,0,
                        @'MCEMOD: init_supervision_info');
                        
    TASK G_hand_data.next_supervise_index   := undefined_dword_c;
    TASK L_tbl_index := 0;
    WHILE (L_tbl_index < G_hand_data.count);
        TASK G_hand_data.cell_data_ptr->cell_data(L_tbl_index)->mce_hand_info.supervision_status := supervision_status__t_undef_c;
        TASK L_tbl_index := L_tbl_index + 1;
    ENDWHILE;
    RETURN;
ENDPROCEDURE init_supervision_info;


/**************************************************************************/
PROCEDURE init_mce_hand_tbl;
DCL
    L_tbl_index     dword;

START ;
    TASK write_test_log(log_type_t_empty_t_c,NIL,0,
                        @'MCEMOD: init_mce_hand_tbl');
    TASK L_tbl_index := 0;
    /* initialize mcermi hand table */
    WHILE (L_tbl_index < G_hand_data.count);
        TASK G_hand_data.cell_data_ptr->cell_data(L_tbl_index)->mce_hand_info.reserved      := F,
             G_hand_data.cell_data_ptr->cell_data(L_tbl_index)->mce_hand_info.hand_pr_id    := 0;
        TASK G_hand_data.cell_data_ptr->cell_data(L_tbl_index)->mce_hand_info.cell_state    := T;
        TASK L_tbl_index := L_tbl_index + 1;
    ENDWHILE;
    CALL init_supervision_info;   /*Init CP hand table*/
    RETURN ;
ENDPROCEDURE init_mce_hand_tbl; 
 
 
/* Procedure Definition ***************************************************/
PROCEDURE cell_table_init__r;

DCL
    l_buf_ptr_handle                 ptr_and_handle_t,
    l_status                         error_t;
/* Procedure Body *********************************************************/
START;

    TASK write_test_log(log_type_t_empty_t_c,NIL,0,
                        @'MCEMOD: cell_table_init__r');

    TASK memset(bytepointer(@G_hand_data),0x00,SIZEOF(mce_hand_data__t));  /*initialize cell data to 0*/
   
    TASK G_hand_data.count := 0;
   
    DECISION (allocate_buffer_r(SIZEOF(mce_cell_table__t),time_limit_t_no_time_limit_c,l_buf_ptr_handle));
    (T):
        TASK G_hand_data.cell_data_ptr   := mcerm_cell_table_ptr__t(ptr_and_handle_t_to_ptr_r(l_buf_ptr_handle)),
             G_hand_data.cerm_data_tbl_handle := ptr_and_handle_t_to_handle_r(l_buf_ptr_handle);

        /*RETURN cell_data_ptr__t(G_hand_data.cell_data_ptr);*/
    ELSE:
        TASK l_status := osc_status();

        TASK write_error_log(log_type_t_dword_e_c,bytepointer(@l_status),1,
                            @'MCEMOD: CERM memory allocation failed');
    ENDDECISION;
                 
    RETURN;
    
ENDPROCEDURE cell_table_init__r;

 
 /* Procedure Definition ***************************************************/

PROCEDURE cell_table_reserve_record__r;

/* Return parameters ******************************************************/

RETURNS cell_data_ptr__t;

/* Variable definitions ***************************************************/
DCL
    l_cell_data_ptr           cell_data_ptr__t;
    
/* Procedure Body *********************************************************/
START;

   TASK l_cell_data_ptr := allocate_mcerm_memory();
                      
    DECISION l_cell_data_ptr /= NIL;
    (T):
       RETURN l_cell_data_ptr;
    ENDDECISION;
    
    RETURN NIL; 

ENDPROCEDURE cell_table_reserve_record__r;

 /* Procedure Definition ***************************************************/

PROCEDURE find_record;

/* Formal parameters ******************************************************/

FPAR
    IN      p_cell_id             c_id_t,
    IN/OUT  p_index               dword;

/* Return parameters ******************************************************/

RETURNS cell_data_ptr__t;

/* Variable definitions ***************************************************/

DCL
    l_index                       dword := 0;

/* Procedure Body *********************************************************/
START;

    WHILE l_index < G_hand_data.count;
        DECISION G_hand_data.cell_data_ptr->cell_data(l_index)->cell_id = p_cell_id;
        (T):  
            TASK p_index := l_index;
            RETURN G_hand_data.cell_data_ptr->cell_data(l_index);
        ENDDECISION;
        TASK l_index := l_index + 1;
    ENDWHILE;
  
    RETURN NIL;
ENDPROCEDURE find_record;


 /* Procedure Definition ***************************************************/

PROCEDURE cell_table_add_cell__r;

/* Formal parameters ******************************************************/

FPAR
    IN/OUT  p_index                 dword;

/* Return parameters ******************************************************/

RETURNS cell_data_ptr__t;
DCL
    l_cell_data_ptr           cell_data_ptr__t := NIL; 

/* Procedure Body *********************************************************/
START;
                            
    TASK l_cell_data_ptr := cell_table_reserve_record__r();
    TASK p_index := dword(G_hand_data.count - 1);

    RETURN l_cell_data_ptr;
    
ENDPROCEDURE cell_table_add_cell__r;


 /* Procedure Definition ***************************************************/

PROCEDURE cell_table_update_cp_pid__r;

/* Formal parameters ******************************************************/

FPAR
    IN      p_cell_id                 c_id_t,
    IN      p_cp_hand_prid            process_id_t;

/* Return parameters ******************************************************/

RETURNS bool;

/* Variable definitions ***************************************************/

DCL
    l_index                       dword := 0;

/* Procedure Body *********************************************************/
START;
    WHILE l_index < G_hand_data.count;
        DECISION G_hand_data.cell_data_ptr->cell_data(l_index)->cell_id = p_cell_id;
        (T):
            TASK G_hand_data.cell_data_ptr->cell_data(l_index)->mce_hand_info.hand_pr_id := p_cp_hand_prid;
            RETURN T;
        ENDDECISION;
        TASK l_index := l_index + 1;
    ENDWHILE;
   
    RETURN F;
ENDPROCEDURE cell_table_update_cp_pid__r;



 /* Procedure Definition ***************************************************/

PROCEDURE cell_data_read__r;

/* Formal parameters ******************************************************/

FPAR
    IN         p_cell_id           c_id_t,
    IN/OUT     p_index             dword;

/* Return parameters ******************************************************/

RETURNS cell_data_ptr__t;

/* Variable definitions ***************************************************/

DCL
    l_cell_data_ptr               cell_data_ptr__t;

/* Procedure Body *********************************************************/
START;
    
    DECISION p_index < wcel_t_max_c;
    (T):
        RETURN G_hand_data.cell_data_ptr->cell_data(p_index);
    ENDDECISION;
    
    TASK l_cell_data_ptr := find_record (p_cell_id,p_index);
    DECISION l_cell_data_ptr /= NIL;
    (T):
        RETURN l_cell_data_ptr;
    ENDDECISION;
    
    TASK p_index := undefined_dword_c;
    
    RETURN NIL;
ENDPROCEDURE cell_data_read__r;


 /* Procedure Definition ***************************************************/

PROCEDURE find_cell_record_for_proid__r;

/* Formal parameters ******************************************************/

FPAR
    IN      p_process_id          process_id_t,
    IN/OUT  p_cell_rec            mce_cell_table__t;

RETURNS dword;
/* Variable definitions ***************************************************/

DCL
    l_index                       dword := 0;

/* Procedure Body *********************************************************/
START;
    
    WHILE l_index < G_hand_data.count;
        DECISION G_hand_data.cell_data_ptr->cell_data(l_index)->mce_hand_info.hand_pr_id = p_process_id AND
                 G_hand_data.cell_data_ptr->cell_data(l_index)->mce_hand_info.reserved = T;
        (T): 
            TASK memcpy(bytepointer(@p_cell_rec), bytepointer(G_hand_data.cell_data_ptr->cell_data(l_index)), SIZEOF(mce_cell_table__t));             
            RETURN l_index;
        ENDDECISION;
        TASK l_index := l_index + 1;
    ENDWHILE;
           
    RETURN undefined_dword_c; 
ENDPROCEDURE find_cell_record_for_proid__r;


 /* Procedure Definition ***************************************************/

PROCEDURE get_cerm_conf_data__r;

/* Return parameters ******************************************************/

RETURNS cerm_conf_data_t;

/* Procedure Body *********************************************************/
START;
   
    RETURN G_hand_data.cerm_conf_data; 
    
ENDPROCEDURE get_cerm_conf_data__r;

/* Procedure Definition ***************************************************/

PROCEDURE cell_table_upd_conf_data__r;

/* Formal parameters ******************************************************/

FPAR
    IN      p_conf_data            cerm_conf_data_t;


/* Procedure Body *********************************************************/
START;
    
    TASK memcpy(bytepointer(@G_hand_data.cerm_conf_data), bytepointer(@p_conf_data), SIZEOF(cerm_conf_data_t));
RETURN;    
ENDPROCEDURE cell_table_upd_conf_data__r;


/* Procedure Definition ***************************************************/

PROCEDURE cell_table_update_record__r;

/* Formal parameters ******************************************************/

FPAR
    IN      p_cell_rec            mce_cell_table__t, 
    IN      p_index               dword;

/* Return parameters ******************************************************/

RETURNS bool;

/* Procedure Body *********************************************************/
START;
    DECISION p_index /= undefined_byte_c;
    (T):        
          TASK memcpy(bytepointer(G_hand_data.cell_data_ptr->cell_data(p_index)), bytepointer(@p_cell_rec), SIZEOF(mce_cell_table__t));
          RETURN T;
    ENDDECISION;    
    
    RETURN F;
    
ENDPROCEDURE cell_table_update_record__r;


 /* Procedure Definition ***************************************************/

PROCEDURE get_hand_info_for_all_cells;
FPAR
    IN/OUT    p_hand_tbl             mce_hand_tbl__t;

DCL
    l_index                 dword := 0,
    l_count                 dword := 0;
/* Procedure Body *********************************************************/
START;
   TASK memset(bytepointer(@p_hand_tbl),0x00,SIZEOF(p_hand_tbl));
   WHILE l_index < G_hand_data.count;
       DECISION G_hand_data.cell_data_ptr->cell_data(l_index)->cell_id /= c_id_t_not_def_c AND
                G_hand_data.cell_data_ptr->cell_data(l_index)->mce_hand_info.reserved = T;
       (T):
           TASK p_hand_tbl.mce_hand_info(l_count) := G_hand_data.cell_data_ptr->cell_data(l_index)->mce_hand_info,
                p_hand_tbl.cell_id_list(l_count)  := G_hand_data.cell_data_ptr->cell_data(l_index)->cell_id;
           TASK l_count := l_count + 1;
       ENDDECISION;     
       TASK l_index := l_index + 1;
    ENDWHILE;
    TASK p_hand_tbl.count := l_count,
         p_hand_tbl.next_supervise_index := G_hand_data.next_supervise_index;
    
    RETURN;    
ENDPROCEDURE get_hand_info_for_all_cells;


 /* Procedure Definition ***************************************************/

PROCEDURE set_data_collection_stop;

DCL
    l_index                 dword := 0;
/* Procedure Body *********************************************************/
START;
   WHILE l_index < G_hand_data.count;
       DECISION G_hand_data.cell_data_ptr->cell_data(l_index)->cell_id /= c_id_t_not_def_c AND
                G_hand_data.cell_data_ptr->cell_data(l_index)->mce_hand_info.reserved = T;
       (T):                
           TASK G_hand_data.cell_data_ptr->cell_data(l_index)->data_collect := data_collect__t_coll_stop_c;
       ENDDECISION;     
       TASK l_index := l_index + 1;
   ENDWHILE;
   RETURN;
ENDPROCEDURE set_data_collection_stop;
 
 /* Procedure Definition ***************************************************/
PROCEDURE update_supervision_info;
FPAR
    IN       p_supervision_index           dword;

/* Procedure Body *********************************************************/
START;
    DECISION G_hand_data.count > 0;
    (T):                
           TASK G_hand_data.next_supervise_index := p_supervision_index;
    ENDDECISION;        
    
    RETURN;
    
ENDPROCEDURE update_supervision_info;


 /* Procedure Definition ***************************************************/
PROCEDURE cerm_update_hand_info;
FPAR
    IN       p_cell_id             c_id_t,
    IN       p_hand_info           mce_hand__t;

DCL
    l_index                  dword := 0;
/* Procedure Body *********************************************************/
START;
   WHILE l_index < G_hand_data.count;
       DECISION G_hand_data.cell_data_ptr->cell_data(l_index)->cell_id = p_cell_id;
       (T):                
             TASK memcpy(bytepointer(@G_hand_data.cell_data_ptr->cell_data(l_index)->mce_hand_info), bytepointer(@p_hand_info), SIZEOF(mce_hand__t));
             OUT;
       ENDDECISION;     
       TASK l_index := l_index + 1;
   ENDWHILE;
    
    RETURN;
    
ENDPROCEDURE cerm_update_hand_info;

/**************************************************************************/
PROCEDURE cerm_get_hand_info;
FPAR
    IN       p_cell_id             c_id_t,
    IN/OUT   p_hand_info           mce_hand__t;

DCL
    l_index                  word := 0;
/* Procedure Body *********************************************************/
START;

    TASK memset(bytepointer(@p_hand_info),0x00,SIZEOF(p_hand_info));
    WHILE l_index < G_hand_data.count;
        DECISION G_hand_data.cell_data_ptr->cell_data(l_index)->cell_id = p_cell_id AND 
                 G_hand_data.cell_data_ptr->cell_data(l_index)->mce_hand_info.reserved = T;
        (T):                
            TASK p_hand_info := G_hand_data.cell_data_ptr->cell_data(l_index)->mce_hand_info;
            OUT;
        ENDDECISION;
        TASK l_index := l_index + 1;
    ENDWHILE;
    
    RETURN;
    
ENDPROCEDURE cerm_get_hand_info;

/**************************************************************************/
PROCEDURE find_inactive_cell_index__r;
FPAR
    IN/OUT  p_index                 dword;

RETURNS cell_data_ptr__t;

DCL
    l_index                  word := 0;
/* Procedure Body *********************************************************/
START;
    WHILE l_index < G_hand_data.count;
        DECISION G_hand_data.cell_data_ptr->cell_data(l_index)->mce_hand_info.reserved;
        (F):
            TASK p_index := l_index;
            RETURN G_hand_data.cell_data_ptr->cell_data(l_index);
        ENDDECISION;
        TASK l_index := l_index + 1;
    ENDWHILE;

    TASK p_index := undefined_dword_c;    /*return index even if the memory allocation failed*/    

    RETURN NIL;
    
ENDPROCEDURE find_inactive_cell_index__r;



/**************************************************************************/
PROCEDURE cerm_update_supervision_status;
FPAR
    IN       p_hand_info                    mce_hand__t;
DCL
    l_index                  word := 0;
/* Procedure Body *********************************************************/
START;
    WHILE l_index < G_hand_data.count;
        DECISION G_hand_data.cell_data_ptr->cell_data(l_index)->mce_hand_info.reserved AND
                 G_hand_data.cell_data_ptr->cell_data(l_index)->mce_hand_info.hand_pr_id = p_hand_info.hand_pr_id;
        (T):
           TASK G_hand_data.cell_data_ptr->cell_data(l_index)->mce_hand_info.supervision_status := p_hand_info.supervision_status;
           OUT;
       ENDDECISION;
       TASK l_index := l_index + 1;
    ENDWHILE;
    RETURN;
ENDPROCEDURE cerm_update_supervision_status;




/**************************************************************************/
PROCEDURE write_error_log;

/**************************************************************************/
FPAR
    IN  p_log_type              log_type_t,
    IN  p_info_ptr              bytepointer,
    IN  p_log_info_item_count   dword,
    IN  p_text_ptr              char_ptr_t;


/**************************************************************************/
START;
    TASK write_to_log(p_log_type,
                      log_write_item_t(p_info_ptr),
                      log_info_item_count_t(p_log_info_item_count),
                      log_text_info_t(p_text_ptr));

    RETURN;
ENDPROCEDURE write_error_log;
/**************************************************************************/
PROCEDURE write_test_log;

/**************************************************************************/
FPAR
    IN  p_log_type              log_type_t,
    IN  p_info_ptr              bytepointer,
    IN  p_log_info_item_count   dword,
    IN  p_text_ptr              char_ptr_t;

/**************************************************************************/
START;
    DECISION G_test_log;
    (/=0):
        TASK write_error_log(p_log_type,
                             p_info_ptr,
                             p_log_info_item_count,
                             p_text_ptr);
    ENDDECISION;

    RETURN;
ENDPROCEDURE write_test_log;



/**************************************************************************/
PROCEDURE release_dynamic_data;

/**************************************************************************/
START;
        DECISION G_hand_data.count;
        (0):    /* empty buffer */
            TASK write_test_log(log_type_t_empty_e_c,NIL,0,
                                @'MCEMOD: CELL_table empty');
        ELSE:
            TASK free_buffer_r(G_hand_data.cerm_data_tbl_handle);

            TASK G_hand_data.cerm_data_tbl_handle := buf_handle_t_illegal_c;

            TASK G_hand_data.count := 0;
        ENDDECISION;

    RETURN;
ENDPROCEDURE release_dynamic_data;

/* Procedure Definition ***************************************************/
PROCEDURE set_test_log_variables;

/* Formal parameters ******************************************************/

FPAR
    IN      p_test_log          byte;

/* Procedure Body *********************************************************/
START;
    TASK G_test_log := p_test_log;

    RETURN;

ENDPROCEDURE set_test_log_variables;


/**************************************************************************/
PROCEDURE get_cell_data_collect_info;

/**************************************************************************/
FPAR
    IN VIEWED cell_id               c_id_t,
    IN VIEWED collect_state         data_collect__t,
    IN/OUT    cell_count            word,
    IN/OUT    data_collect_info     mcerm_data_collect_inquire__t;
DCL 
    l_index                  word := 0,
    cell_table_data_ptr      cell_data_ptr__t;

/**************************************************************************/
START;

    TASK cell_count := 0;
    
    WHILE l_index < G_hand_data.count;
        TASK cell_table_data_ptr := G_hand_data.cell_data_ptr->cell_data(l_index);
        DECISION ((cell_id = c_id_t_not_def_c) OR (cell_id = cell_table_data_ptr->cell_id));
        (T):
            DECISION ((collect_state = data_collect__t_undef_c) OR 
                      (cell_table_data_ptr->data_collect = collect_state));
            (T):
                TASK data_collect_info.cell_data_collect(cell_count).cell_id                 := cell_table_data_ptr->cell_id,
                     data_collect_info.cell_data_collect(cell_count).data_collect            := cell_table_data_ptr->data_collect,
                     data_collect_info.cell_data_collect(cell_count).home_icsu               := cell_table_data_ptr->home_icsu,
                     data_collect_info.cell_data_collect(cell_count).dsp_index               := cell_table_data_ptr->dsp_index,
                     data_collect_info.cell_data_collect(cell_count).l3_proid                := cell_table_data_ptr->l3_proid,
                     data_collect_info.cell_data_collect(cell_count).pcermi_report_period    := cell_table_data_ptr->pcermi_report_period / 60 / ticket_per_second__c,
                     cell_count := cell_count + 1;
            ENDDECISION;
        ENDDECISION;

        DECISION cell_count >= 100;
        (T):
            OUT;
        ENDDECISION;
       
        TASK l_index := l_index + 1;
    ENDWHILE;
    RETURN;

ENDPROCEDURE get_cell_data_collect_info;
    
/**************************************************************************/
PROCEDURE get_cell_counter_data_info;

/**************************************************************************/
FPAR
    IN VIEWED cell_id               c_id_t,
    IN/OUT    cell_count            word,
    IN/OUT    counter_data_info     mcerm_counter_data_inquire__t;
DCL 
    l_index                  word := 0,
    l_cell_data_ptr          cell_data_ptr__t := NIL;

/**************************************************************************/
START;

    TASK cell_count := 0;
    WHILE l_index < G_hand_data.count;
        TASK l_cell_data_ptr := G_hand_data.cell_data_ptr->cell_data(l_index);
        DECISION ((cell_id = c_id_t_not_def_c) OR (cell_id = l_cell_data_ptr->cell_id));
        (T):
            TASK counter_data_info.counter_data(cell_count).cell_id              := l_cell_data_ptr->cell_id,
                 counter_data_info.counter_data(cell_count).counter_data         := convert_bps_to_mbps__r(l_cell_data_ptr->cell_data),
                 counter_data_info.counter_data(cell_count).cerm_temp_storage(0) := l_cell_data_ptr->cell_data_storage(0),
                 counter_data_info.counter_data(cell_count).cerm_temp_storage(1) := temp_convert_bps_to_mbps__r(l_cell_data_ptr->cell_data_storage(1)),
                 counter_data_info.counter_data(cell_count).cerm_temp_storage(2) := temp_convert_bps_to_mbps__r(l_cell_data_ptr->cell_data_storage(2)),
                 cell_count := cell_count + 1;
        ENDDECISION;

        DECISION cell_count >= 100;
        (T):
            OUT;
        ENDDECISION;
        TASK l_index := l_index + 1;
    ENDWHILE;
  
    RETURN;

ENDPROCEDURE get_cell_counter_data_info;

/**************************************************************************/
PROCEDURE convert_bps_to_mbps__r;
FPAR
    IN VIEWED  cell_data                 cell_data__t;

RETURNS cell_counter_data__t;

DCL
    cell_counter_data                  cell_counter_data__t;
/* Procedure Body *********************************************************/
START;
    TASK cell_counter_data.hspa_users.max       := byte(cell_data.hspa_users.max),
         cell_counter_data.hspa_users.min       := byte(cell_data.hspa_users.min),
         cell_counter_data.hspa_users.ave       := byte(cell_data.hspa_users.ave),

         cell_counter_data.thp_dl.max           := byte(cell_data.thp_dl.max / bps_to_mbps_div__c),
         cell_counter_data.thp_dl.min           := byte(cell_data.thp_dl.min / bps_to_mbps_div__c),
         cell_counter_data.thp_dl.ave           := byte(cell_data.thp_dl.ave / bps_to_mbps_div__c),
         
         cell_counter_data.thp_ul.max           := byte(cell_data.thp_ul.max / bps_to_mbps_div__c),
         cell_counter_data.thp_ul.min           := byte(cell_data.thp_ul.min / bps_to_mbps_div__c),
         cell_counter_data.thp_ul.ave           := byte(cell_data.thp_ul.ave / bps_to_mbps_div__c);

    RETURN cell_counter_data;
    
ENDPROCEDURE convert_bps_to_mbps__r;

PROCEDURE temp_convert_bps_to_mbps__r;
FPAR
    IN VIEWED  counter_data                 temp_counter_data__t;

RETURNS temp_counter_data__t;

DCL
    cell_counter_data                  temp_counter_data__t;
/* Procedure Body *********************************************************/
START;
    TASK cell_counter_data.num := counter_data.num / bps_to_mbps_div__c;
    TASK cell_counter_data.den := counter_data.den;

    RETURN cell_counter_data;
    
ENDPROCEDURE temp_convert_bps_to_mbps__r;

PROCEDURE set_mcermi_debug_flag;

/* Formal parameters ******************************************************/

FPAR
    IN   mcermi_debug_flag          bool;

/* Procedure Body *********************************************************/
START;
    TASK G_mcermi_debug_flag := mcermi_debug_flag;

    RETURN;

ENDPROCEDURE set_mcermi_debug_flag;

PROCEDURE get_mcermi_debug_flag;

/* Formal parameters ******************************************************/

RETURNS bool;
/* Procedure Body *********************************************************/
START;
    RETURN G_mcermi_debug_flag;


ENDPROCEDURE get_mcermi_debug_flag;

PROCEDURE set_c1file_update_period;

/* Formal parameters ******************************************************/

FPAR
    IN    c1file_update_period          dword;

/* Procedure Body *********************************************************/
START;
    TASK G_c1file_update_period := c1file_update_period;

    RETURN;

ENDPROCEDURE set_c1file_update_period;

PROCEDURE get_c1file_update_period;

/* Formal parameters ******************************************************/

RETURNS dword;
/* Procedure Body *********************************************************/
START;
    RETURN G_c1file_update_period;


ENDPROCEDURE get_c1file_update_period;

PROCEDURE set_pcermi_report_period;

/* Formal parameters ******************************************************/

FPAR
    IN    pcermi_report_period          dword;

/* Procedure Body *********************************************************/
START;
    TASK G_pcermi_report_period := pcermi_report_period;

    RETURN;

ENDPROCEDURE set_pcermi_report_period;

PROCEDURE get_pcermi_report_period;

/* Formal parameters ******************************************************/

RETURNS dword;
/* Procedure Body *********************************************************/
START;
    RETURN G_pcermi_report_period;


ENDPROCEDURE get_pcermi_report_period;


PROCEDURE get_home_icsu_index;

/* Formal parameters ******************************************************/

FPAR
    IN    l3_pid          pid;

RETURNS unit_index_t;

DCL
    l_home_icsu_index          unit_index_t := unit_index_t_any_index_c,
    l_origin_computer          computer_t,
    l_error                    error_t,
    l_unit_it                  unit_it_t;

/* Procedure Body *********************************************************/
START;
    TASK l_origin_computer := get_pid_computer_r(l3_pid);
    TASK l_error := unit_type_and_index_r(l_origin_computer,l_unit_it);
    DECISION l_error;
    (success_ec):
         TASK l_home_icsu_index := l_unit_it.index;
    ENDDECISION;

    RETURN l_home_icsu_index;

ENDPROCEDURE get_home_icsu_index;

PROCEDURE get_home_icsu_log_addr;

/* Formal parameters ******************************************************/

FPAR
    IN    l3_pid          pid;

RETURNS log_address_t;

DCL
    l_home_icsu_index                 unit_index_t := unit_index_t_any_index_c,
    l_home_icsu_log_address           log_address_t,
    l_error                           error_t;

/* Procedure Body *********************************************************/
START;
    TASK l_home_icsu_index := get_home_icsu_index(l3_pid);
    TASK l_error := type_to_plog_addr_r(unit_type_t_icsu_c, l_home_icsu_index, l_home_icsu_log_address);

    RETURN l_home_icsu_log_address;

ENDPROCEDURE get_home_icsu_log_addr;

/**************************************************************************/

PROCEDURE read_prfile;
/**************************************************************************/
FPAR
    IN     parameter_class pr_cl_t,
    IN     parameter_number pr_nr_t,
    IN/OUT        p_cerm_feature_flag     word;

RETURNS bool;
/**************************************************************************/
START;
   DECISION (read_parameter(parameter_class, parameter_number, p_cerm_feature_flag));  /* todo :need to be corrected after the ECL*/
   (FALSE):
       TASK write_test_log(log_type_t_empty_t_c, NIL, 0, @'MCEMA1: read PRFILE fails');               
       RETURN F;
   ELSE:
   	RETURN T;
   ENDDECISION;
 
ENDPROCEDURE read_prfile;
/**************************************************************************/
ENDIMPLEMENTATION  mcemodqx;
